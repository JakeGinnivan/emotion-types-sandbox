// Definitions by: Junyoung Clare Jang <https://github.com/Ailrun>
// TypeScript Version: 3.1

import * as React from 'react'

import { StyledComponent, StyledOptions, CreateStyledComponentExtrinsic, CreateStyledComponentIntrinsic } from '@emotion/styled'
import { AddOptionalTo, PropsOf } from './helper'

export interface ThemeProviderProps<Theme> {
    theme: Partial<Theme> | ((outerTheme: Theme) => Theme)
    children?: React.ReactNode
}

export function ThemeProvider<Theme>(props: ThemeProviderProps<Theme>): React.ReactElement

/**
 * @todo Add more constraint to C so that
 * this function only accepts components with theme props.
 */
export function withTheme<C extends React.ComponentType<any>>(
    component: C
): React.SFC<AddOptionalTo<PropsOf<C>, 'theme'>>

export interface EmotionTheming<Theme> {
    ThemeProvider(props: ThemeProviderProps<Theme>): React.ReactElement
    withTheme<C extends React.ComponentType<any>>(
        component: C
    ): React.SFC<AddOptionalTo<PropsOf<C>, 'theme'>>
}

type JSXInEl = JSX.IntrinsicElements

/**
 * @desc
 * This function accepts `InnerProps`/`Tag` to infer the type of `tag`,
 * and accepts `ExtraProps` for user who use string style
 * to be able to declare extra props without using
 * `` styled('button')<ExtraProps>`...` ``, which does not supported in
 * styled-component VSCode extension.
 * If your tool support syntax highlighting for `` styled('button')<ExtraProps>`...` ``
 * it could be more efficient.
 */
export interface CreateThemedStyled<Theme extends object> {
    <Tag extends React.ComponentType<any>, ExtraProps = {}>(
        tag: Tag,
        options?: StyledOptions
    ): CreateStyledComponentExtrinsic<Tag, ExtraProps & { theme: Theme }>

    <Tag extends keyof JSXInEl, ExtraProps = {}>(
        tag: Tag,
        options?: StyledOptions
    ): CreateStyledComponentIntrinsic<Tag, ExtraProps & { theme: Theme }>
}

export type WithTheme<P, T> = P extends { theme: infer Theme }
    ? P & { theme: Exclude<Theme, undefined> }
    : P & { theme: T }
